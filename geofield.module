<?php

/**
 * Implements hook_field_info().
 */
function geofield_field_info() {
  return array(
    'geofield' => array(
      'label' => 'Geofield',
      'description' => t('This field stores geo information.'),
      'default_widget' => 'text_textfield',
      'default_formatter' => 'default',
    ),
  );
}

/**
 * Implements of hook_content_is_empty().
 * 
 * TODO: lat lon are optional, so this is broken.
 */
function geofield_field_is_empty($item, $field) {
  return (empty($item['lat']) || empty($item['lon']));
}

/**
 * Implements hook_field_widget_info().
 */
function geofield_field_widget_info() {
  return array(
    'geofield_textfield' => array(
      'label' => t('Geofield'),
      'field types' => array('geofield'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 *
 */
function geofield_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Default geo field'),
      'field types' => array('geofield'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function geofield_field_widget_form(&$form, &$form_state, $field, $instance,
  $langcode, $items, $delta, $base) {
  $element = $base;
  $element['lat'] = array(
    '#title' => 'Latitude',
    '#required' => FALSE,
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['lat']) ?
      $items[$delta]['lat'] : NULL,
  );
  $element['lon'] = array(
    '#title' => 'Longitude',
    '#required' => FALSE,
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['lon']) ?
      $items[$delta]['lon'] : NULL,
  );
  $element['left'] = array(
    '#title' => 'Left Latitude',
    '#required' => FALSE,
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['left']) ?
      $items[$delta]['left'] : NULL,
  );
  $element['top'] = array(
    '#title' => 'Top Longitude',
    '#required' => FALSE,
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['top']) ?
      $items[$delta]['top'] : NULL,
  );
  $element['right'] = array(
    '#title' => 'Right Latitude',
    '#required' => FALSE,
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['right']) ?
      $items[$delta]['right'] : NULL,
  );
  $element['bottom'] = array(
    '#title' => 'Bottom Longitude',
    '#required' => FALSE,
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['bottom']) ?
      $items[$delta]['bottom'] : NULL,
  );
  return $element;
}

/**
 * Implementation of hook_feeds_node_processor_targets_alter().
 */
function geofield_feeds_processor_targets_alter(&$targets, $entity_type,
  $bundle_name) {
    foreach (field_info_instances($entity_type, $bundle_name) as
      $name => $instance) {
    $info = field_info_field($name);
    if ($info['type'] == 'geofield') {
      $targets[$info['field_name'] . ':lat'] = array(
        'name' => t($instance['label'] . ' Latitude'),
        'callback' => 'geofield_set_target',
        'real_target' => $info['field_name'],
      );
      $targets[$info['field_name'] . ':lon'] = array(
        'name' => t($instance['label'] . ' Longitude'),
        'callback' => 'geofield_set_target',
        'real_target' => $info['field_name'],
      );
      $targets[$info['field_name'] . ':left'] = array(
        'name' => t($instance['label'] . ' Left Latitude'),
        'callback' => 'geofield_set_target',
        'real_target' => $info['field_name'],
      );
      $targets[$info['field_name'] . ':top'] = array(
        'name' => t($instance['label'] . ' Top Longitude'),
        'callback' => 'geofield_set_target',
        'real_target' => $info['field_name'],
      );
      $targets[$info['field_name'] . ':right'] = array(
        'name' => t($instance['label'] . ' Right Latitude'),
        'callback' => 'geofield_set_target',
        'real_target' => $info['field_name'],
      );
      $targets[$info['field_name'] . ':bottom'] = array(
        'name' => t($instance['label'] . ' Bottom Longitude'),
        'callback' => 'geofield_set_target',
        'real_target' => $info['field_name'],
      );
    }
  }
}

/**
 * Example callback specified in hook_feeds_processor_targets_alter().
 *
 * @param $source
 *   Field mapper source settings.
 * @param $entity
 *   An entity object, for instance a node object.
 * @param $target
 *   A string identifying the target on the node.
 * @param $value
 *   The value to populate the target with.
 *
 */
function geofield_set_target($source, $entity, $target, $value) {
  list($field_name, $sub_field) = explode(':', $target, 2);
  $entity->{$field_name}['und'][0][$sub_field] = $value;
}

/**
 * Implementation of hook_view_api().
 */
function geofield_views_api() {
  return array(
    'api' => '3.0-alpha1',
    'path' => drupal_get_path('module', 'geofield')
    . '/views');
}
